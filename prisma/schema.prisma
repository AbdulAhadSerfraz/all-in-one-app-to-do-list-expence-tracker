generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id
  email     String    @unique
  name      String?
  avatarUrl String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  tasks     Task[]
  expenses  Expense[]
  sleep     Sleep[]
  calories  Calorie[]
  journal   Journal[]
  mood      Mood[]

  @@index([email])
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  completed   Boolean   @default(false)
  priority    String    @default("medium") // high, medium, low
  due         DateTime
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([completed])
  @@index([priority])
}

model Expense {
  id          String    @id @default(uuid())
  description String
  amount      Float
  date        DateTime
  category    String?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([category])
}

model Sleep {
  id          String    @id @default(uuid())
  date        DateTime
  hoursSlept  Float
  quality     Int       // 1-5 scale
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([date])
}

model Calorie {
  id          String    @id @default(uuid())
  date        DateTime
  amount      Int
  description String?
  type        String    // intake or burned
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([date])
}

model Journal {
  id          String    @id @default(uuid())
  date        DateTime
  content     String
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([date])
}

model Mood {
  id          String    @id @default(uuid())
  date        DateTime
  rating      Int       // 1-5 scale
  note        String?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([date])
}
